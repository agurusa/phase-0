1. How does tracking and adding changes make developers' lives easier?

Tracking and adding changes makes developers' lives easier by establishing version control. It gives us the opportunity to check our work amongst our peers, and also save any edited work to avoid technical mishaps.

2. What is a commit?

A commit is the point where we save our work as programmers. When we modify a file, our work is not saved automatically. First, we have to use the  command "git add." From there, we can commit our work. This acts as a point that we can reference in case of error.

3. What are the best practices for commit messages?

Commit messages should be written in an easily understandable way. They should be written as commands (imperative verb tense). It is better to be more verbose to properly communicate any changes that were made to a file, but it should be less than 50 characters. The first letter should also be capitalized, like a sentence.

If a more detailed explanation is necesary, the first line acts as the subject of the message. After a line break, write the body of the message.

4. What does the HEAD^ argument mean?

This refers to the last commit (where HEAD refers to the commit you're currently on).

5. What are the 3 stages of a git change and how do you move a file from one stage to the other?

The first stage of a git change is the working stage. This is where you can modify files. A branch must be created off the master branch. From there, you can write your code and begin modifying in Sublime. Once these files are complete, they must be saved. From there, you can view the files in the command line.

The second stage is the staged stage. This is where you can view modified files to see what was saved in Sublime, and what can be committed. You can view this in the command line by typing "git status." If you are ready to commit the changes, they must be added using "git add."

The last stage is commit. This is the stage where your modifications are saved to the repo. Changes are committed using "git commit -m "commit message""

After these changes are made, the branch can be pushed to GitHub for viewing as a pull request.

6. Write a handy cheatsheet of the commands you need to commit your changes.

Beginning checks:
git branch (checks working branch)
git status (checks to verify that nothing is waiting to be committed)
git pull (checks to verify that you're working on the most recent version of the file from GitHub)

Working stage:
git checkout -b new-branch (makes a new branch)
touch filethatyoureworkingon.md (makes a new file, if necessary)
subl filethatyoureworkingon.md. (opens file in sublime)
----make changes in sublime and save---

Staged stage:
git status (checks to see what needs to be committed)
git add filethatyoureworkingon.md (gets file ready to be committed)

Commit stage:
git commit -m "amazing commit message" (commits to repo)

Merging branches locally:
git checkout master
git pull origin master
git checkout new-branch
git merge master

Sending changes to the cloud:
git push origin new-branch
---make pull request on GitHub---
git branch -d new-branch

What is a pull request and how do you create and merge one?

A pull request is a change that a user makes to a file and pushes to the GitHub repo. The master of the repo on GitHub will review the changes made and can "save" those changes to the remote repo.

You create a merged repo by pushing the local branch to GitHub. You can compare the original file to the changed one on GitHub. If you're happy with the changes, they click "create pull request."

The master of the repo can then merge your branch with the original by clicking "merge pull request." You then delete the branch to close it out and keep the repo clean.

Why are pull requests preferred when working with teams?

Pull requests allow another developer to check our work. It is a way to ensure that we're both being efficient in our code, and sticking to the goals of the project. It is also a way to check for typos/ inconsistency through the project.
